name: "EasyAudit - fix & PR (paid)"

on:
  workflow_dispatch:
    inputs:
      ack_paid:
        description: "I confirm this action is PAID and a PR will be billed"
        required: true
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write

jobs:
  fix-and-pr:
    if: ${{ inputs.ack_paid == true }}
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/crealoz/easyaudit:latest
    defaults:
      run:
        shell: sh

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Scan (JSON)
        run: |
          set -euo pipefail
          mkdir -p report
          # Run EasyAudit scan and produce JSON output
          easyaudit scan \
            --format=json \
            --output=report/easyaudit-report.json \
            "$GITHUB_WORKSPACE" \
            --exclude="vendor,generated,var,pub/static,pub/media"
          test -s report/easyaudit-report.json

      - name: Apply fixes (paid) + generate patch file
        id: fix
        env:
          EASYAUDIT_AUTH: ${{ secrets.EASYAUDIT_AUTH }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          # Build a safe patch name with branch name + timestamp
          BRANCH_NAME="${GITHUB_REF_NAME:-manual}"
          BRANCH_SAFE="$(printf '%s' "$BRANCH_NAME" | sed -E 's/[^a-zA-Z0-9._-]+/-/g')"
          TS="$(date +%Y%m%d-%H%M%S)"
          PATCH_NAME="patch-${BRANCH_SAFE}-${TS}"

          # Run fix-apply with --patch-name (this will produce a patch file)
          easyaudit fix-apply report/easyaudit-report.json --confirm --patch-name="$PATCH_NAME"

          # Resolve patch path
          PATCH_PATH="patches/$PATCH_NAME.patch"

          if [ -z "$PATCH_PATH" ] || [ ! -f "$PATCH_PATH" ]; then
            echo "Patch not found: $PATCH_PATH"
            exit 1
          fi

          echo "patch_name=$PATCH_NAME" >> "$GITHUB_OUTPUT"
          echo "patch_path=$PATCH_PATH" >> "$GITHUB_OUTPUT"

      - name: Apply generated patch (auto -p detection)
        id: apply
        shell: bash
        run: |
          set -euo pipefail
          PATCH_PATH="${{ steps.fix.outputs.patch_path }}"
          echo "Using patch: $PATCH_PATH"
          # Quick no-op check: if patch applies in reverse, it means changes are already present
          if git apply --check -R "$PATCH_PATH" 2>/dev/null; then
            echo "Patch already applied (reverse check succeeded). Skipping apply."
            echo "applied=false" >> "$GITHUB_OUTPUT"
            exit 0
          fi
          applied="false"
          for p in 0 1 2 3 4 5 6; do
            git reset --hard >/dev/null
            if git apply --index -p$p "$PATCH_PATH"; then
              echo "Applied with -p$p"
              echo "applied=true" >> "$GITHUB_OUTPUT"
              echo "p_level=$p" >> "$GITHUB_OUTPUT"
              break
            fi
          done
          if [ "${applied:-false}" != "true" ]; then
            echo "::error::Failed to apply patch. Check paths or p-level."
            exit 1
          fi

      - name: Create Pull Request
        if: steps.apply.outputs.applied != 'false'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref_name }}-easyaudit-fix
          commit-message: "Apply EasyAudit patch: ${{ steps.fix.outputs.patch_name }}"
          title: "EasyAudit automatic PR"
          body: |
            EasyAudit automatically generated this patch from branch `${{ github.ref_name }}`.

            Patch file: `${{ steps.fix.outputs.patch_path }}`
            Applied with `-p${{ steps.apply.outputs.p_level }}`.
          signoff: false
          draft: false
          # delete-branch: true
